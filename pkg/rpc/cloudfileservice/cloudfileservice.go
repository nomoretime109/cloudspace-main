// Code generated by Kitex v0.6.1. DO NOT EDIT.

package cloudfileservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	rpc "github.com/yanguiyuan/cloudspace/pkg/rpc"
)

func serviceInfo() *kitex.ServiceInfo {
	return cloudFileServiceServiceInfo
}

var cloudFileServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "CloudFileService"
	handlerType := (*rpc.CloudFileService)(nil)
	methods := map[string]kitex.MethodInfo{
		"add":                 kitex.NewMethodInfo(addHandler, newCloudFileServiceAddArgs, newCloudFileServiceAddResult, false),
		"createDirectory":     kitex.NewMethodInfo(createDirectoryHandler, newCloudFileServiceCreateDirectoryArgs, newCloudFileServiceCreateDirectoryResult, false),
		"remove":              kitex.NewMethodInfo(removeHandler, newCloudFileServiceRemoveArgs, newCloudFileServiceRemoveResult, false),
		"removeDirectory":     kitex.NewMethodInfo(removeDirectoryHandler, newCloudFileServiceRemoveDirectoryArgs, newCloudFileServiceRemoveDirectoryResult, false),
		"query":               kitex.NewMethodInfo(queryHandler, newCloudFileServiceQueryArgs, newCloudFileServiceQueryResult, false),
		"queryFileItemByID":   kitex.NewMethodInfo(queryFileItemByIDHandler, newCloudFileServiceQueryFileItemByIDArgs, newCloudFileServiceQueryFileItemByIDResult, false),
		"update":              kitex.NewMethodInfo(updateHandler, newCloudFileServiceUpdateArgs, newCloudFileServiceUpdateResult, false),
		"rename":              kitex.NewMethodInfo(renameHandler, newCloudFileServiceRenameArgs, newCloudFileServiceRenameResult, false),
		"queryUserFileRoot":   kitex.NewMethodInfo(queryUserFileRootHandler, newCloudFileServiceQueryUserFileRootArgs, newCloudFileServiceQueryUserFileRootResult, false),
		"createFileItem":      kitex.NewMethodInfo(createFileItemHandler, newCloudFileServiceCreateFileItemArgs, newCloudFileServiceCreateFileItemResult, false),
		"createNamespace":     kitex.NewMethodInfo(createNamespaceHandler, newCloudFileServiceCreateNamespaceArgs, newCloudFileServiceCreateNamespaceResult, false),
		"createUserNamespace": kitex.NewMethodInfo(createUserNamespaceHandler, newCloudFileServiceCreateUserNamespaceArgs, newCloudFileServiceCreateUserNamespaceResult, false),
		"getFileURL":          kitex.NewMethodInfo(getFileURLHandler, newCloudFileServiceGetFileURLArgs, newCloudFileServiceGetFileURLResult, false),
		"queryUserNamespaces": kitex.NewMethodInfo(queryUserNamespacesHandler, newCloudFileServiceQueryUserNamespacesArgs, newCloudFileServiceQueryUserNamespacesResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "rpc",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.6.1",
		Extra:           extra,
	}
	return svcInfo
}

func addHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*rpc.CloudFileServiceAddArgs)
	realResult := result.(*rpc.CloudFileServiceAddResult)
	success, err := handler.(rpc.CloudFileService).Add(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCloudFileServiceAddArgs() interface{} {
	return rpc.NewCloudFileServiceAddArgs()
}

func newCloudFileServiceAddResult() interface{} {
	return rpc.NewCloudFileServiceAddResult()
}

func createDirectoryHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*rpc.CloudFileServiceCreateDirectoryArgs)
	realResult := result.(*rpc.CloudFileServiceCreateDirectoryResult)
	success, err := handler.(rpc.CloudFileService).CreateDirectory(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCloudFileServiceCreateDirectoryArgs() interface{} {
	return rpc.NewCloudFileServiceCreateDirectoryArgs()
}

func newCloudFileServiceCreateDirectoryResult() interface{} {
	return rpc.NewCloudFileServiceCreateDirectoryResult()
}

func removeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*rpc.CloudFileServiceRemoveArgs)

	err := handler.(rpc.CloudFileService).Remove(ctx, realArg.Req)
	if err != nil {
		return err
	}

	return nil
}
func newCloudFileServiceRemoveArgs() interface{} {
	return rpc.NewCloudFileServiceRemoveArgs()
}

func newCloudFileServiceRemoveResult() interface{} {
	return rpc.NewCloudFileServiceRemoveResult()
}

func removeDirectoryHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*rpc.CloudFileServiceRemoveDirectoryArgs)

	err := handler.(rpc.CloudFileService).RemoveDirectory(ctx, realArg.Id)
	if err != nil {
		return err
	}

	return nil
}
func newCloudFileServiceRemoveDirectoryArgs() interface{} {
	return rpc.NewCloudFileServiceRemoveDirectoryArgs()
}

func newCloudFileServiceRemoveDirectoryResult() interface{} {
	return rpc.NewCloudFileServiceRemoveDirectoryResult()
}

func queryHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*rpc.CloudFileServiceQueryArgs)
	realResult := result.(*rpc.CloudFileServiceQueryResult)
	success, err := handler.(rpc.CloudFileService).Query(ctx, realArg.Pid, realArg.Uid)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCloudFileServiceQueryArgs() interface{} {
	return rpc.NewCloudFileServiceQueryArgs()
}

func newCloudFileServiceQueryResult() interface{} {
	return rpc.NewCloudFileServiceQueryResult()
}

func queryFileItemByIDHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*rpc.CloudFileServiceQueryFileItemByIDArgs)
	realResult := result.(*rpc.CloudFileServiceQueryFileItemByIDResult)
	success, err := handler.(rpc.CloudFileService).QueryFileItemByID(ctx, realArg.Id)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCloudFileServiceQueryFileItemByIDArgs() interface{} {
	return rpc.NewCloudFileServiceQueryFileItemByIDArgs()
}

func newCloudFileServiceQueryFileItemByIDResult() interface{} {
	return rpc.NewCloudFileServiceQueryFileItemByIDResult()
}

func updateHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*rpc.CloudFileServiceUpdateArgs)

	err := handler.(rpc.CloudFileService).Update(ctx, realArg.Req)
	if err != nil {
		return err
	}

	return nil
}
func newCloudFileServiceUpdateArgs() interface{} {
	return rpc.NewCloudFileServiceUpdateArgs()
}

func newCloudFileServiceUpdateResult() interface{} {
	return rpc.NewCloudFileServiceUpdateResult()
}

func renameHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*rpc.CloudFileServiceRenameArgs)

	err := handler.(rpc.CloudFileService).Rename(ctx, realArg.Id, realArg.NewName_)
	if err != nil {
		return err
	}

	return nil
}
func newCloudFileServiceRenameArgs() interface{} {
	return rpc.NewCloudFileServiceRenameArgs()
}

func newCloudFileServiceRenameResult() interface{} {
	return rpc.NewCloudFileServiceRenameResult()
}

func queryUserFileRootHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*rpc.CloudFileServiceQueryUserFileRootArgs)
	realResult := result.(*rpc.CloudFileServiceQueryUserFileRootResult)
	success, err := handler.(rpc.CloudFileService).QueryUserFileRoot(ctx, realArg.UserID)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newCloudFileServiceQueryUserFileRootArgs() interface{} {
	return rpc.NewCloudFileServiceQueryUserFileRootArgs()
}

func newCloudFileServiceQueryUserFileRootResult() interface{} {
	return rpc.NewCloudFileServiceQueryUserFileRootResult()
}

func createFileItemHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*rpc.CloudFileServiceCreateFileItemArgs)
	realResult := result.(*rpc.CloudFileServiceCreateFileItemResult)
	success, err := handler.(rpc.CloudFileService).CreateFileItem(ctx, realArg.Name, realArg.Ty, realArg.ParentID)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newCloudFileServiceCreateFileItemArgs() interface{} {
	return rpc.NewCloudFileServiceCreateFileItemArgs()
}

func newCloudFileServiceCreateFileItemResult() interface{} {
	return rpc.NewCloudFileServiceCreateFileItemResult()
}

func createNamespaceHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*rpc.CloudFileServiceCreateNamespaceArgs)
	realResult := result.(*rpc.CloudFileServiceCreateNamespaceResult)
	success, err := handler.(rpc.CloudFileService).CreateNamespace(ctx, realArg.Name, realArg.RootID)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newCloudFileServiceCreateNamespaceArgs() interface{} {
	return rpc.NewCloudFileServiceCreateNamespaceArgs()
}

func newCloudFileServiceCreateNamespaceResult() interface{} {
	return rpc.NewCloudFileServiceCreateNamespaceResult()
}

func createUserNamespaceHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*rpc.CloudFileServiceCreateUserNamespaceArgs)

	err := handler.(rpc.CloudFileService).CreateUserNamespace(ctx, realArg.UserID, realArg.NamespaceID, realArg.Authority)
	if err != nil {
		return err
	}

	return nil
}
func newCloudFileServiceCreateUserNamespaceArgs() interface{} {
	return rpc.NewCloudFileServiceCreateUserNamespaceArgs()
}

func newCloudFileServiceCreateUserNamespaceResult() interface{} {
	return rpc.NewCloudFileServiceCreateUserNamespaceResult()
}

func getFileURLHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*rpc.CloudFileServiceGetFileURLArgs)
	realResult := result.(*rpc.CloudFileServiceGetFileURLResult)
	success, err := handler.(rpc.CloudFileService).GetFileURL(ctx, realArg.Id, realArg.Uid)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newCloudFileServiceGetFileURLArgs() interface{} {
	return rpc.NewCloudFileServiceGetFileURLArgs()
}

func newCloudFileServiceGetFileURLResult() interface{} {
	return rpc.NewCloudFileServiceGetFileURLResult()
}

func queryUserNamespacesHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*rpc.CloudFileServiceQueryUserNamespacesArgs)
	realResult := result.(*rpc.CloudFileServiceQueryUserNamespacesResult)
	success, err := handler.(rpc.CloudFileService).QueryUserNamespaces(ctx, realArg.UserID)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCloudFileServiceQueryUserNamespacesArgs() interface{} {
	return rpc.NewCloudFileServiceQueryUserNamespacesArgs()
}

func newCloudFileServiceQueryUserNamespacesResult() interface{} {
	return rpc.NewCloudFileServiceQueryUserNamespacesResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Add(ctx context.Context, req *rpc.AddRequest) (r *rpc.CloudFileItem, err error) {
	var _args rpc.CloudFileServiceAddArgs
	_args.Req = req
	var _result rpc.CloudFileServiceAddResult
	if err = p.c.Call(ctx, "add", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateDirectory(ctx context.Context, req *rpc.CreateDirectoryRequest) (r *rpc.CloudFileItem, err error) {
	var _args rpc.CloudFileServiceCreateDirectoryArgs
	_args.Req = req
	var _result rpc.CloudFileServiceCreateDirectoryResult
	if err = p.c.Call(ctx, "createDirectory", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Remove(ctx context.Context, req *rpc.RemoveRequest) (err error) {
	var _args rpc.CloudFileServiceRemoveArgs
	_args.Req = req
	var _result rpc.CloudFileServiceRemoveResult
	if err = p.c.Call(ctx, "remove", &_args, &_result); err != nil {
		return
	}
	return nil
}

func (p *kClient) RemoveDirectory(ctx context.Context, id string) (err error) {
	var _args rpc.CloudFileServiceRemoveDirectoryArgs
	_args.Id = id
	var _result rpc.CloudFileServiceRemoveDirectoryResult
	if err = p.c.Call(ctx, "removeDirectory", &_args, &_result); err != nil {
		return
	}
	return nil
}

func (p *kClient) Query(ctx context.Context, pid string, uid int64) (r *rpc.QueryResponse, err error) {
	var _args rpc.CloudFileServiceQueryArgs
	_args.Pid = pid
	_args.Uid = uid
	var _result rpc.CloudFileServiceQueryResult
	if err = p.c.Call(ctx, "query", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) QueryFileItemByID(ctx context.Context, id string) (r *rpc.CloudFileItem, err error) {
	var _args rpc.CloudFileServiceQueryFileItemByIDArgs
	_args.Id = id
	var _result rpc.CloudFileServiceQueryFileItemByIDResult
	if err = p.c.Call(ctx, "queryFileItemByID", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Update(ctx context.Context, req *rpc.UpdateRequest) (err error) {
	var _args rpc.CloudFileServiceUpdateArgs
	_args.Req = req
	var _result rpc.CloudFileServiceUpdateResult
	if err = p.c.Call(ctx, "update", &_args, &_result); err != nil {
		return
	}
	return nil
}

func (p *kClient) Rename(ctx context.Context, id string, newName_ string) (err error) {
	var _args rpc.CloudFileServiceRenameArgs
	_args.Id = id
	_args.NewName_ = newName_
	var _result rpc.CloudFileServiceRenameResult
	if err = p.c.Call(ctx, "rename", &_args, &_result); err != nil {
		return
	}
	return nil
}

func (p *kClient) QueryUserFileRoot(ctx context.Context, userID int64) (r string, err error) {
	var _args rpc.CloudFileServiceQueryUserFileRootArgs
	_args.UserID = userID
	var _result rpc.CloudFileServiceQueryUserFileRootResult
	if err = p.c.Call(ctx, "queryUserFileRoot", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateFileItem(ctx context.Context, name string, ty string, parentID string) (r string, err error) {
	var _args rpc.CloudFileServiceCreateFileItemArgs
	_args.Name = name
	_args.Ty = ty
	_args.ParentID = parentID
	var _result rpc.CloudFileServiceCreateFileItemResult
	if err = p.c.Call(ctx, "createFileItem", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateNamespace(ctx context.Context, name string, rootID string) (r int64, err error) {
	var _args rpc.CloudFileServiceCreateNamespaceArgs
	_args.Name = name
	_args.RootID = rootID
	var _result rpc.CloudFileServiceCreateNamespaceResult
	if err = p.c.Call(ctx, "createNamespace", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateUserNamespace(ctx context.Context, userID int64, namespaceID int64, authority int32) (err error) {
	var _args rpc.CloudFileServiceCreateUserNamespaceArgs
	_args.UserID = userID
	_args.NamespaceID = namespaceID
	_args.Authority = authority
	var _result rpc.CloudFileServiceCreateUserNamespaceResult
	if err = p.c.Call(ctx, "createUserNamespace", &_args, &_result); err != nil {
		return
	}
	return nil
}

func (p *kClient) GetFileURL(ctx context.Context, id string, uid int64) (r string, err error) {
	var _args rpc.CloudFileServiceGetFileURLArgs
	_args.Id = id
	_args.Uid = uid
	var _result rpc.CloudFileServiceGetFileURLResult
	if err = p.c.Call(ctx, "getFileURL", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) QueryUserNamespaces(ctx context.Context, userID int64) (r []*rpc.Namespace, err error) {
	var _args rpc.CloudFileServiceQueryUserNamespacesArgs
	_args.UserID = userID
	var _result rpc.CloudFileServiceQueryUserNamespacesResult
	if err = p.c.Call(ctx, "queryUserNamespaces", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
