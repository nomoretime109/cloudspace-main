// Code generated by Kitex v0.6.1. DO NOT EDIT.

package userservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	rpc "github.com/yanguiyuan/cloudspace/pkg/rpc"
)

func serviceInfo() *kitex.ServiceInfo {
	return userServiceServiceInfo
}

var userServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "UserService"
	handlerType := (*rpc.UserService)(nil)
	methods := map[string]kitex.MethodInfo{
		"UserLogin":    kitex.NewMethodInfo(userLoginHandler, newUserServiceUserLoginArgs, newUserServiceUserLoginResult, false),
		"UserRegister": kitex.NewMethodInfo(userRegisterHandler, newUserServiceUserRegisterArgs, newUserServiceUserRegisterResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "rpc",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.6.1",
		Extra:           extra,
	}
	return svcInfo
}

func userLoginHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*rpc.UserServiceUserLoginArgs)
	realResult := result.(*rpc.UserServiceUserLoginResult)
	success, err := handler.(rpc.UserService).UserLogin(ctx, realArg.Username, realArg.Password)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newUserServiceUserLoginArgs() interface{} {
	return rpc.NewUserServiceUserLoginArgs()
}

func newUserServiceUserLoginResult() interface{} {
	return rpc.NewUserServiceUserLoginResult()
}

func userRegisterHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*rpc.UserServiceUserRegisterArgs)
	realResult := result.(*rpc.UserServiceUserRegisterResult)
	success, err := handler.(rpc.UserService).UserRegister(ctx, realArg.Username, realArg.Password)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newUserServiceUserRegisterArgs() interface{} {
	return rpc.NewUserServiceUserRegisterArgs()
}

func newUserServiceUserRegisterResult() interface{} {
	return rpc.NewUserServiceUserRegisterResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) UserLogin(ctx context.Context, username string, password string) (r int64, err error) {
	var _args rpc.UserServiceUserLoginArgs
	_args.Username = username
	_args.Password = password
	var _result rpc.UserServiceUserLoginResult
	if err = p.c.Call(ctx, "UserLogin", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UserRegister(ctx context.Context, username string, password string) (r int64, err error) {
	var _args rpc.UserServiceUserRegisterArgs
	_args.Username = username
	_args.Password = password
	var _result rpc.UserServiceUserRegisterResult
	if err = p.c.Call(ctx, "UserRegister", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
