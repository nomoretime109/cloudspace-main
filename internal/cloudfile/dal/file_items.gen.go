// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/yanguiyuan/cloudspace/internal/cloudfile/model"
)

func newFileItem(db *gorm.DB, opts ...gen.DOOption) fileItem {
	_fileItem := fileItem{}

	_fileItem.fileItemDo.UseDB(db, opts...)
	_fileItem.fileItemDo.UseModel(&model.FileItem{})

	tableName := _fileItem.fileItemDo.TableName()
	_fileItem.ALL = field.NewAsterisk(tableName)
	_fileItem.ID = field.NewString(tableName, "id")
	_fileItem.NamespaceID = field.NewInt64(tableName, "namespace_id")
	_fileItem.Name = field.NewString(tableName, "name")
	_fileItem.Type = field.NewString(tableName, "type")
	_fileItem.CreateTime = field.NewTime(tableName, "create_time")
	_fileItem.UpdateTime = field.NewTime(tableName, "update_time")

	_fileItem.fillFieldMap()

	return _fileItem
}

type fileItem struct {
	fileItemDo fileItemDo

	ALL         field.Asterisk
	ID          field.String
	NamespaceID field.Int64
	Name        field.String
	Type        field.String
	CreateTime  field.Time
	UpdateTime  field.Time

	fieldMap map[string]field.Expr
}

func (f fileItem) Table(newTableName string) *fileItem {
	f.fileItemDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fileItem) As(alias string) *fileItem {
	f.fileItemDo.DO = *(f.fileItemDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fileItem) updateTableName(table string) *fileItem {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewString(table, "id")
	f.NamespaceID = field.NewInt64(table, "namespace_id")
	f.Name = field.NewString(table, "name")
	f.Type = field.NewString(table, "type")
	f.CreateTime = field.NewTime(table, "create_time")
	f.UpdateTime = field.NewTime(table, "update_time")

	f.fillFieldMap()

	return f
}

func (f *fileItem) WithContext(ctx context.Context) IFileItemDo { return f.fileItemDo.WithContext(ctx) }

func (f fileItem) TableName() string { return f.fileItemDo.TableName() }

func (f fileItem) Alias() string { return f.fileItemDo.Alias() }

func (f fileItem) Columns(cols ...field.Expr) gen.Columns { return f.fileItemDo.Columns(cols...) }

func (f *fileItem) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fileItem) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 6)
	f.fieldMap["id"] = f.ID
	f.fieldMap["namespace_id"] = f.NamespaceID
	f.fieldMap["name"] = f.Name
	f.fieldMap["type"] = f.Type
	f.fieldMap["create_time"] = f.CreateTime
	f.fieldMap["update_time"] = f.UpdateTime
}

func (f fileItem) clone(db *gorm.DB) fileItem {
	f.fileItemDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fileItem) replaceDB(db *gorm.DB) fileItem {
	f.fileItemDo.ReplaceDB(db)
	return f
}

type fileItemDo struct{ gen.DO }

type IFileItemDo interface {
	gen.SubQuery
	Debug() IFileItemDo
	WithContext(ctx context.Context) IFileItemDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFileItemDo
	WriteDB() IFileItemDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFileItemDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFileItemDo
	Not(conds ...gen.Condition) IFileItemDo
	Or(conds ...gen.Condition) IFileItemDo
	Select(conds ...field.Expr) IFileItemDo
	Where(conds ...gen.Condition) IFileItemDo
	Order(conds ...field.Expr) IFileItemDo
	Distinct(cols ...field.Expr) IFileItemDo
	Omit(cols ...field.Expr) IFileItemDo
	Join(table schema.Tabler, on ...field.Expr) IFileItemDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFileItemDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFileItemDo
	Group(cols ...field.Expr) IFileItemDo
	Having(conds ...gen.Condition) IFileItemDo
	Limit(limit int) IFileItemDo
	Offset(offset int) IFileItemDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFileItemDo
	Unscoped() IFileItemDo
	Create(values ...*model.FileItem) error
	CreateInBatches(values []*model.FileItem, batchSize int) error
	Save(values ...*model.FileItem) error
	First() (*model.FileItem, error)
	Take() (*model.FileItem, error)
	Last() (*model.FileItem, error)
	Find() ([]*model.FileItem, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FileItem, err error)
	FindInBatches(result *[]*model.FileItem, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FileItem) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFileItemDo
	Assign(attrs ...field.AssignExpr) IFileItemDo
	Joins(fields ...field.RelationField) IFileItemDo
	Preload(fields ...field.RelationField) IFileItemDo
	FirstOrInit() (*model.FileItem, error)
	FirstOrCreate() (*model.FileItem, error)
	FindByPage(offset int, limit int) (result []*model.FileItem, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFileItemDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fileItemDo) Debug() IFileItemDo {
	return f.withDO(f.DO.Debug())
}

func (f fileItemDo) WithContext(ctx context.Context) IFileItemDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fileItemDo) ReadDB() IFileItemDo {
	return f.Clauses(dbresolver.Read)
}

func (f fileItemDo) WriteDB() IFileItemDo {
	return f.Clauses(dbresolver.Write)
}

func (f fileItemDo) Session(config *gorm.Session) IFileItemDo {
	return f.withDO(f.DO.Session(config))
}

func (f fileItemDo) Clauses(conds ...clause.Expression) IFileItemDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fileItemDo) Returning(value interface{}, columns ...string) IFileItemDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fileItemDo) Not(conds ...gen.Condition) IFileItemDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fileItemDo) Or(conds ...gen.Condition) IFileItemDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fileItemDo) Select(conds ...field.Expr) IFileItemDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fileItemDo) Where(conds ...gen.Condition) IFileItemDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fileItemDo) Order(conds ...field.Expr) IFileItemDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fileItemDo) Distinct(cols ...field.Expr) IFileItemDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fileItemDo) Omit(cols ...field.Expr) IFileItemDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fileItemDo) Join(table schema.Tabler, on ...field.Expr) IFileItemDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fileItemDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFileItemDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fileItemDo) RightJoin(table schema.Tabler, on ...field.Expr) IFileItemDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fileItemDo) Group(cols ...field.Expr) IFileItemDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fileItemDo) Having(conds ...gen.Condition) IFileItemDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fileItemDo) Limit(limit int) IFileItemDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fileItemDo) Offset(offset int) IFileItemDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fileItemDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFileItemDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fileItemDo) Unscoped() IFileItemDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fileItemDo) Create(values ...*model.FileItem) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fileItemDo) CreateInBatches(values []*model.FileItem, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fileItemDo) Save(values ...*model.FileItem) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fileItemDo) First() (*model.FileItem, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FileItem), nil
	}
}

func (f fileItemDo) Take() (*model.FileItem, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FileItem), nil
	}
}

func (f fileItemDo) Last() (*model.FileItem, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FileItem), nil
	}
}

func (f fileItemDo) Find() ([]*model.FileItem, error) {
	result, err := f.DO.Find()
	return result.([]*model.FileItem), err
}

func (f fileItemDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FileItem, err error) {
	buf := make([]*model.FileItem, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fileItemDo) FindInBatches(result *[]*model.FileItem, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fileItemDo) Attrs(attrs ...field.AssignExpr) IFileItemDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fileItemDo) Assign(attrs ...field.AssignExpr) IFileItemDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fileItemDo) Joins(fields ...field.RelationField) IFileItemDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fileItemDo) Preload(fields ...field.RelationField) IFileItemDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fileItemDo) FirstOrInit() (*model.FileItem, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FileItem), nil
	}
}

func (f fileItemDo) FirstOrCreate() (*model.FileItem, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FileItem), nil
	}
}

func (f fileItemDo) FindByPage(offset int, limit int) (result []*model.FileItem, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fileItemDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fileItemDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fileItemDo) Delete(models ...*model.FileItem) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fileItemDo) withDO(do gen.Dao) *fileItemDo {
	f.DO = *do.(*gen.DO)
	return f
}
