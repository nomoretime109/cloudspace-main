// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/yanguiyuan/cloudspace/internal/cloudfile/model"
)

func newFileIndex(db *gorm.DB, opts ...gen.DOOption) fileIndex {
	_fileIndex := fileIndex{}

	_fileIndex.fileIndexDo.UseDB(db, opts...)
	_fileIndex.fileIndexDo.UseModel(&model.FileIndex{})

	tableName := _fileIndex.fileIndexDo.TableName()
	_fileIndex.ALL = field.NewAsterisk(tableName)
	_fileIndex.ParentID = field.NewString(tableName, "parent_id")
	_fileIndex.ChildID = field.NewString(tableName, "child_id")

	_fileIndex.fillFieldMap()

	return _fileIndex
}

type fileIndex struct {
	fileIndexDo fileIndexDo

	ALL      field.Asterisk
	ParentID field.String
	ChildID  field.String

	fieldMap map[string]field.Expr
}

func (f fileIndex) Table(newTableName string) *fileIndex {
	f.fileIndexDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fileIndex) As(alias string) *fileIndex {
	f.fileIndexDo.DO = *(f.fileIndexDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fileIndex) updateTableName(table string) *fileIndex {
	f.ALL = field.NewAsterisk(table)
	f.ParentID = field.NewString(table, "parent_id")
	f.ChildID = field.NewString(table, "child_id")

	f.fillFieldMap()

	return f
}

func (f *fileIndex) WithContext(ctx context.Context) IFileIndexDo {
	return f.fileIndexDo.WithContext(ctx)
}

func (f fileIndex) TableName() string { return f.fileIndexDo.TableName() }

func (f fileIndex) Alias() string { return f.fileIndexDo.Alias() }

func (f fileIndex) Columns(cols ...field.Expr) gen.Columns { return f.fileIndexDo.Columns(cols...) }

func (f *fileIndex) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fileIndex) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 2)
	f.fieldMap["parent_id"] = f.ParentID
	f.fieldMap["child_id"] = f.ChildID
}

func (f fileIndex) clone(db *gorm.DB) fileIndex {
	f.fileIndexDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fileIndex) replaceDB(db *gorm.DB) fileIndex {
	f.fileIndexDo.ReplaceDB(db)
	return f
}

type fileIndexDo struct{ gen.DO }

type IFileIndexDo interface {
	gen.SubQuery
	Debug() IFileIndexDo
	WithContext(ctx context.Context) IFileIndexDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFileIndexDo
	WriteDB() IFileIndexDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFileIndexDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFileIndexDo
	Not(conds ...gen.Condition) IFileIndexDo
	Or(conds ...gen.Condition) IFileIndexDo
	Select(conds ...field.Expr) IFileIndexDo
	Where(conds ...gen.Condition) IFileIndexDo
	Order(conds ...field.Expr) IFileIndexDo
	Distinct(cols ...field.Expr) IFileIndexDo
	Omit(cols ...field.Expr) IFileIndexDo
	Join(table schema.Tabler, on ...field.Expr) IFileIndexDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFileIndexDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFileIndexDo
	Group(cols ...field.Expr) IFileIndexDo
	Having(conds ...gen.Condition) IFileIndexDo
	Limit(limit int) IFileIndexDo
	Offset(offset int) IFileIndexDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFileIndexDo
	Unscoped() IFileIndexDo
	Create(values ...*model.FileIndex) error
	CreateInBatches(values []*model.FileIndex, batchSize int) error
	Save(values ...*model.FileIndex) error
	First() (*model.FileIndex, error)
	Take() (*model.FileIndex, error)
	Last() (*model.FileIndex, error)
	Find() ([]*model.FileIndex, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FileIndex, err error)
	FindInBatches(result *[]*model.FileIndex, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FileIndex) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFileIndexDo
	Assign(attrs ...field.AssignExpr) IFileIndexDo
	Joins(fields ...field.RelationField) IFileIndexDo
	Preload(fields ...field.RelationField) IFileIndexDo
	FirstOrInit() (*model.FileIndex, error)
	FirstOrCreate() (*model.FileIndex, error)
	FindByPage(offset int, limit int) (result []*model.FileIndex, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFileIndexDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fileIndexDo) Debug() IFileIndexDo {
	return f.withDO(f.DO.Debug())
}

func (f fileIndexDo) WithContext(ctx context.Context) IFileIndexDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fileIndexDo) ReadDB() IFileIndexDo {
	return f.Clauses(dbresolver.Read)
}

func (f fileIndexDo) WriteDB() IFileIndexDo {
	return f.Clauses(dbresolver.Write)
}

func (f fileIndexDo) Session(config *gorm.Session) IFileIndexDo {
	return f.withDO(f.DO.Session(config))
}

func (f fileIndexDo) Clauses(conds ...clause.Expression) IFileIndexDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fileIndexDo) Returning(value interface{}, columns ...string) IFileIndexDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fileIndexDo) Not(conds ...gen.Condition) IFileIndexDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fileIndexDo) Or(conds ...gen.Condition) IFileIndexDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fileIndexDo) Select(conds ...field.Expr) IFileIndexDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fileIndexDo) Where(conds ...gen.Condition) IFileIndexDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fileIndexDo) Order(conds ...field.Expr) IFileIndexDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fileIndexDo) Distinct(cols ...field.Expr) IFileIndexDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fileIndexDo) Omit(cols ...field.Expr) IFileIndexDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fileIndexDo) Join(table schema.Tabler, on ...field.Expr) IFileIndexDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fileIndexDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFileIndexDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fileIndexDo) RightJoin(table schema.Tabler, on ...field.Expr) IFileIndexDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fileIndexDo) Group(cols ...field.Expr) IFileIndexDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fileIndexDo) Having(conds ...gen.Condition) IFileIndexDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fileIndexDo) Limit(limit int) IFileIndexDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fileIndexDo) Offset(offset int) IFileIndexDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fileIndexDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFileIndexDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fileIndexDo) Unscoped() IFileIndexDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fileIndexDo) Create(values ...*model.FileIndex) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fileIndexDo) CreateInBatches(values []*model.FileIndex, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fileIndexDo) Save(values ...*model.FileIndex) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fileIndexDo) First() (*model.FileIndex, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FileIndex), nil
	}
}

func (f fileIndexDo) Take() (*model.FileIndex, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FileIndex), nil
	}
}

func (f fileIndexDo) Last() (*model.FileIndex, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FileIndex), nil
	}
}

func (f fileIndexDo) Find() ([]*model.FileIndex, error) {
	result, err := f.DO.Find()
	return result.([]*model.FileIndex), err
}

func (f fileIndexDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FileIndex, err error) {
	buf := make([]*model.FileIndex, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fileIndexDo) FindInBatches(result *[]*model.FileIndex, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fileIndexDo) Attrs(attrs ...field.AssignExpr) IFileIndexDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fileIndexDo) Assign(attrs ...field.AssignExpr) IFileIndexDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fileIndexDo) Joins(fields ...field.RelationField) IFileIndexDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fileIndexDo) Preload(fields ...field.RelationField) IFileIndexDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fileIndexDo) FirstOrInit() (*model.FileIndex, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FileIndex), nil
	}
}

func (f fileIndexDo) FirstOrCreate() (*model.FileIndex, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FileIndex), nil
	}
}

func (f fileIndexDo) FindByPage(offset int, limit int) (result []*model.FileIndex, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fileIndexDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fileIndexDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fileIndexDo) Delete(models ...*model.FileIndex) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fileIndexDo) withDO(do gen.Dao) *fileIndexDo {
	f.DO = *do.(*gen.DO)
	return f
}
