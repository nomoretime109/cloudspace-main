// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/yanguiyuan/cloudspace/internal/cloudfile/model"
)

func newUserNamespace(db *gorm.DB, opts ...gen.DOOption) userNamespace {
	_userNamespace := userNamespace{}

	_userNamespace.userNamespaceDo.UseDB(db, opts...)
	_userNamespace.userNamespaceDo.UseModel(&model.UserNamespace{})

	tableName := _userNamespace.userNamespaceDo.TableName()
	_userNamespace.ALL = field.NewAsterisk(tableName)
	_userNamespace.UserID = field.NewInt64(tableName, "user_id")
	_userNamespace.NamespaceID = field.NewInt64(tableName, "namespace_id")
	_userNamespace.Authority = field.NewInt32(tableName, "authority")
	_userNamespace.CreateTime = field.NewTime(tableName, "create_time")
	_userNamespace.UpdateTime = field.NewTime(tableName, "update_time")

	_userNamespace.fillFieldMap()

	return _userNamespace
}

type userNamespace struct {
	userNamespaceDo userNamespaceDo

	ALL         field.Asterisk
	UserID      field.Int64
	NamespaceID field.Int64
	Authority   field.Int32
	CreateTime  field.Time
	UpdateTime  field.Time

	fieldMap map[string]field.Expr
}

func (u userNamespace) Table(newTableName string) *userNamespace {
	u.userNamespaceDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userNamespace) As(alias string) *userNamespace {
	u.userNamespaceDo.DO = *(u.userNamespaceDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userNamespace) updateTableName(table string) *userNamespace {
	u.ALL = field.NewAsterisk(table)
	u.UserID = field.NewInt64(table, "user_id")
	u.NamespaceID = field.NewInt64(table, "namespace_id")
	u.Authority = field.NewInt32(table, "authority")
	u.CreateTime = field.NewTime(table, "create_time")
	u.UpdateTime = field.NewTime(table, "update_time")

	u.fillFieldMap()

	return u
}

func (u *userNamespace) WithContext(ctx context.Context) IUserNamespaceDo {
	return u.userNamespaceDo.WithContext(ctx)
}

func (u userNamespace) TableName() string { return u.userNamespaceDo.TableName() }

func (u userNamespace) Alias() string { return u.userNamespaceDo.Alias() }

func (u userNamespace) Columns(cols ...field.Expr) gen.Columns {
	return u.userNamespaceDo.Columns(cols...)
}

func (u *userNamespace) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userNamespace) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 5)
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["namespace_id"] = u.NamespaceID
	u.fieldMap["authority"] = u.Authority
	u.fieldMap["create_time"] = u.CreateTime
	u.fieldMap["update_time"] = u.UpdateTime
}

func (u userNamespace) clone(db *gorm.DB) userNamespace {
	u.userNamespaceDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userNamespace) replaceDB(db *gorm.DB) userNamespace {
	u.userNamespaceDo.ReplaceDB(db)
	return u
}

type userNamespaceDo struct{ gen.DO }

type IUserNamespaceDo interface {
	gen.SubQuery
	Debug() IUserNamespaceDo
	WithContext(ctx context.Context) IUserNamespaceDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserNamespaceDo
	WriteDB() IUserNamespaceDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserNamespaceDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserNamespaceDo
	Not(conds ...gen.Condition) IUserNamespaceDo
	Or(conds ...gen.Condition) IUserNamespaceDo
	Select(conds ...field.Expr) IUserNamespaceDo
	Where(conds ...gen.Condition) IUserNamespaceDo
	Order(conds ...field.Expr) IUserNamespaceDo
	Distinct(cols ...field.Expr) IUserNamespaceDo
	Omit(cols ...field.Expr) IUserNamespaceDo
	Join(table schema.Tabler, on ...field.Expr) IUserNamespaceDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserNamespaceDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserNamespaceDo
	Group(cols ...field.Expr) IUserNamespaceDo
	Having(conds ...gen.Condition) IUserNamespaceDo
	Limit(limit int) IUserNamespaceDo
	Offset(offset int) IUserNamespaceDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserNamespaceDo
	Unscoped() IUserNamespaceDo
	Create(values ...*model.UserNamespace) error
	CreateInBatches(values []*model.UserNamespace, batchSize int) error
	Save(values ...*model.UserNamespace) error
	First() (*model.UserNamespace, error)
	Take() (*model.UserNamespace, error)
	Last() (*model.UserNamespace, error)
	Find() ([]*model.UserNamespace, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserNamespace, err error)
	FindInBatches(result *[]*model.UserNamespace, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserNamespace) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserNamespaceDo
	Assign(attrs ...field.AssignExpr) IUserNamespaceDo
	Joins(fields ...field.RelationField) IUserNamespaceDo
	Preload(fields ...field.RelationField) IUserNamespaceDo
	FirstOrInit() (*model.UserNamespace, error)
	FirstOrCreate() (*model.UserNamespace, error)
	FindByPage(offset int, limit int) (result []*model.UserNamespace, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserNamespaceDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userNamespaceDo) Debug() IUserNamespaceDo {
	return u.withDO(u.DO.Debug())
}

func (u userNamespaceDo) WithContext(ctx context.Context) IUserNamespaceDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userNamespaceDo) ReadDB() IUserNamespaceDo {
	return u.Clauses(dbresolver.Read)
}

func (u userNamespaceDo) WriteDB() IUserNamespaceDo {
	return u.Clauses(dbresolver.Write)
}

func (u userNamespaceDo) Session(config *gorm.Session) IUserNamespaceDo {
	return u.withDO(u.DO.Session(config))
}

func (u userNamespaceDo) Clauses(conds ...clause.Expression) IUserNamespaceDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userNamespaceDo) Returning(value interface{}, columns ...string) IUserNamespaceDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userNamespaceDo) Not(conds ...gen.Condition) IUserNamespaceDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userNamespaceDo) Or(conds ...gen.Condition) IUserNamespaceDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userNamespaceDo) Select(conds ...field.Expr) IUserNamespaceDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userNamespaceDo) Where(conds ...gen.Condition) IUserNamespaceDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userNamespaceDo) Order(conds ...field.Expr) IUserNamespaceDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userNamespaceDo) Distinct(cols ...field.Expr) IUserNamespaceDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userNamespaceDo) Omit(cols ...field.Expr) IUserNamespaceDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userNamespaceDo) Join(table schema.Tabler, on ...field.Expr) IUserNamespaceDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userNamespaceDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserNamespaceDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userNamespaceDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserNamespaceDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userNamespaceDo) Group(cols ...field.Expr) IUserNamespaceDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userNamespaceDo) Having(conds ...gen.Condition) IUserNamespaceDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userNamespaceDo) Limit(limit int) IUserNamespaceDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userNamespaceDo) Offset(offset int) IUserNamespaceDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userNamespaceDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserNamespaceDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userNamespaceDo) Unscoped() IUserNamespaceDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userNamespaceDo) Create(values ...*model.UserNamespace) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userNamespaceDo) CreateInBatches(values []*model.UserNamespace, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userNamespaceDo) Save(values ...*model.UserNamespace) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userNamespaceDo) First() (*model.UserNamespace, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserNamespace), nil
	}
}

func (u userNamespaceDo) Take() (*model.UserNamespace, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserNamespace), nil
	}
}

func (u userNamespaceDo) Last() (*model.UserNamespace, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserNamespace), nil
	}
}

func (u userNamespaceDo) Find() ([]*model.UserNamespace, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserNamespace), err
}

func (u userNamespaceDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserNamespace, err error) {
	buf := make([]*model.UserNamespace, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userNamespaceDo) FindInBatches(result *[]*model.UserNamespace, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userNamespaceDo) Attrs(attrs ...field.AssignExpr) IUserNamespaceDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userNamespaceDo) Assign(attrs ...field.AssignExpr) IUserNamespaceDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userNamespaceDo) Joins(fields ...field.RelationField) IUserNamespaceDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userNamespaceDo) Preload(fields ...field.RelationField) IUserNamespaceDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userNamespaceDo) FirstOrInit() (*model.UserNamespace, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserNamespace), nil
	}
}

func (u userNamespaceDo) FirstOrCreate() (*model.UserNamespace, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserNamespace), nil
	}
}

func (u userNamespaceDo) FindByPage(offset int, limit int) (result []*model.UserNamespace, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userNamespaceDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userNamespaceDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userNamespaceDo) Delete(models ...*model.UserNamespace) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userNamespaceDo) withDO(do gen.Dao) *userNamespaceDo {
	u.DO = *do.(*gen.DO)
	return u
}
